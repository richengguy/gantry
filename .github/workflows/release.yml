name: Build a new release.

on:
  push:
    branches:
      - main
  release:
    types:
      - published
  pull_request:
    paths-ignore:
      - 'README.md'

jobs:
  build-dist:
    name: Build gantry release.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup 'uv'
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.7.13"
          checksum: "ff031258ff08b3aca46648398e21fe9679744501e3c9a928c8e42d596a708bbc"
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Build source distribution and Python wheel
        run: uv build --sdist --wheel

      - name: Upload build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist
          if-no-files-found: error

  generate-schemas:
    name: Generate JSON schema package.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup 'uv'
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.7.13"
          checksum: "ff031258ff08b3aca46648398e21fe9679744501e3c9a928c8e42d596a708bbc"
          enable-cache: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Export the JSON schemas from gantry.
        run: uv run gantry schemas export

      - name: Create schemas archive.
        run: tar -czvf schemas.tar.gz schemas

      - name: Upload build artifacts.
        uses: actions/upload-artifact@v4
        with:
          name: schemas
          path: schemas.tar.gz
          if-no-files-found: error

  update-release:
    name: Attach artifacts to release.
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs:
      - build-dist
      - generate-schemas
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts.
        uses: actions/download-artifact@v4

      - name: Parse version tag.
        id: version
        run: echo "tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Attach artifacts to release.
        run: |
          echo "Attaching artifacts to ${RELEASE_TAG}."
          wheel=$(ls build-artifacts/*.whl)
          sdist=$(ls build-artifacts/*.tar.gz)
          gh release upload ${RELEASE_TAG} \
            "schemas/schemas.tar.gz#Service Definition Schemas" \
            "${wheel}#Python Wheel" \
            "${sdist}#Source Distribution"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ steps.version.outputs.tag }}
